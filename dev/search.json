[{"path":[]},{"path":"https://lifecycle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://lifecycle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://lifecycle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://lifecycle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://lifecycle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://lifecycle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://lifecycle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://lifecycle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://lifecycle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://lifecycle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://lifecycle.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://lifecycle.r-lib.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 lifecycle authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lifecycle.r-lib.org/dev/articles/communicate.html","id":"basics","dir":"Articles","previous_headings":"","what":"Basics","title":"Communicate lifecycle changes in your functions","text":"lifecycle badges make easy users see lifecycle stage reading documentation. use badges, first call usethis::use_lifecycle() embed badge images package (need ), use lifecycle::badge() insert badge: Deprecated functions also need advertise status run. lifecycle provides deprecate_warn() takes three main arguments: first argument, , gives version number deprecation occurred. second argument, , describes exactly deprecated. third argument, , provides recommended alternative. ’ll cover details shortly, sample uses: (Note message includes package name — automatically discovered environment calling function work unless function called package namespace.) following sections describe use lifecycle badges functions together handle variety common development tasks.","code":"#' `r lifecycle::badge(\"experimental\")` #' `r lifecycle::badge(\"deprecated\")` #' `r lifecycle::badge(\"superseded\")` lifecycle::deprecate_warn(\"1.0.0\", \"old_fun()\", \"new_fun()\") #> Warning: `old_fun()` was deprecated in lifecycle 1.0.0. #> ℹ Please use `new_fun()` instead. #> ℹ The deprecated feature was likely used in the base package. #>   Please report the issue to the authors. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning #> was generated. lifecycle::deprecate_warn(\"1.0.0\", \"fun()\", \"testthat::fun()\") #> Warning: `fun()` was deprecated in lifecycle 1.0.0. #> ℹ Please use `testthat::fun()` instead. #> ℹ The deprecated feature was likely used in the base package. #>   Please report the issue to the authors. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning #> was generated. lifecycle::deprecate_warn(\"1.0.0\", \"fun(old_arg)\", \"fun(new_arg)\") #> Warning: The `old_arg` argument of `fun()` is deprecated as of lifecycle 1.0.0. #> ℹ Please use the `new_arg` argument instead. #> ℹ The deprecated feature was likely used in the base package. #>   Please report the issue to the authors. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning #> was generated."},{"path":[]},{"path":"https://lifecycle.r-lib.org/dev/articles/communicate.html","id":"deprecate-a-function","dir":"Articles","previous_headings":"Functions","what":"Deprecate a function","title":"Communicate lifecycle changes in your functions","text":"First, add badge @description block1. Briefly describe deprecation occurred use instead. Next, update examples show convert old usage new usage: add @keywords internal remove function documentation index. use pkgdown, also check ’s longer listed _pkgdown.yml. changes reduce chance new users coming across deprecated function, don’t prevent already know referring docs. ’re now done docs, ’s time add warning user calls function. adding call deprecate_warn() first line function: deprecate_warn() generates user friendly messages two common deprecation alternatives: Function package: lifecycle::deprecate_warn(\"1.0.0\", \"fun_old()\", \"fun_new()\") Function another package: lifecycle::deprecate_warn(\"1.0.0\", \"old()\", \"package::new()\") cases, use details argument provide message user: ’s good practice test ’ve correctly implemented deprecation, testing deprecated function still works generates useful warning. Using expectation inside testthat::expect_snapshot()2 convenient way : existing tests deprecated function can suppress warning tests lifecycle_verbosity option: add separate test specifically deprecation.","code":"#' Add two numbers #'  #' @description #' `r lifecycle::badge(\"deprecated\")` #'  #' This function was deprecated because we realised that it's #' a special case of the [sum()] function. #' @examples  #' add_two(1, 2) #' # -> #' sum(1, 2) #' @keywords internal add_two <- function(x, y) {   lifecycle::deprecate_warn(\"1.0.0\", \"add_two()\", \"base::sum()\")   x + y }  add_two(1, 2) #> Warning: `add_two()` was deprecated in lifecycle 1.0.0. #> ℹ Please use `base::sum()` instead. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning #> was generated. #> [1] 3 add_two <- function(x, y) {   lifecycle::deprecate_warn(     \"1.0.0\",      \"add_two()\",      details = \"This function is a special case of sum(); use it instead.\"   )   x + y }  add_two(1, 2) #> Warning: `add_two()` was deprecated in lifecycle 1.0.0. #> ℹ This function is a special case of sum(); use it instead. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning #> was generated. #> [1] 3 test_that(\"add_two is deprecated\", {   expect_snapshot({     x <- add_two(1, 1)     expect_equal(x, 2)   }) }) test_that(\"add_two returns the sum of its inputs\", {   withr::local_options(lifecycle_verbosity = \"quiet\")   expect_equal(add_two(1, 1), 2) }) test_that(\"add_two is deprecated\", {   expect_snapshot(add_two(1, 1)) })"},{"path":"https://lifecycle.r-lib.org/dev/articles/communicate.html","id":"gradual-deprecation","dir":"Articles","previous_headings":"Functions","what":"Gradual deprecation","title":"Communicate lifecycle changes in your functions","text":"particularly important functions, can choose add two stages deprecation process: deprecate_soft() used deprecate_warn(). function warns () users try feature global environment (b) developers directly use feature (running testthat tests). warning deprecated feature called indirectly another package — goal ensure warn person power stop using deprecated feature. deprecate_stop() comes deprecate_warn() generates error instead warning. main benefit simply removing function user informed replacement. use stages ’ll also need process bumping deprecation stage major minor releases. recommend something like : Search deprecate_stop() consider ’re ready remove function completely. Search deprecate_warn() replace deprecate_stop(). Remove remaining body function tests. Search deprecate_soft() replace deprecate_warn().","code":""},{"path":"https://lifecycle.r-lib.org/dev/articles/communicate.html","id":"rename-a-function","dir":"Articles","previous_headings":"Functions","what":"Rename a function","title":"Communicate lifecycle changes in your functions","text":"rename function without breaking existing code, move implementation new function, call new function old function, along deprecation message: renaming many functions part API overhaul, ’ll often make sense document changes one file, like https://rvest.tidyverse.org/reference/rename.html.","code":"#' Add two numbers #'  #' @description  #' `r lifecycle::badge(\"deprecated\")` #'  #' `add_two()` was renamed to `number_add()` to create a more #' consistent API. #' @keywords internal #' @export add_two <- function(foo, bar) {   lifecycle::deprecate_warn(\"1.0.0\", \"add_two()\", \"number_add()\")   number_add(foo, bar) }  # documentation goes here... #' @export number_add <- function(x, y) {   x + y }"},{"path":"https://lifecycle.r-lib.org/dev/articles/communicate.html","id":"supersede-a-function","dir":"Articles","previous_headings":"Functions","what":"Supersede a function","title":"Communicate lifecycle changes in your functions","text":"Superseding function simpler deprecating , since don’t need steer users away warning. need add superseded badge: describe function superseded, recommended alternative : rest documentation can stay . ’re willing live bleeding edge lifecycle, add call experimental signal_stage(): signal isn’t currently hooked behaviour, plan provide logging analysis tools future release.","code":"#' Gather columns into key-value pairs #' #' @description #' `r lifecycle::badge(\"superseded\")` #' #' Development on `gather()` is complete, and for new code we recommend #' switching to `pivot_longer()`, which is easier to use, more featureful, #' and still under active development. #'  #' In brief, #' `df %>% gather(\"key\", \"value\", x, y, z)` is equivalent to #' `df %>% pivot_longer(c(x, y, z), names_to = \"key\", values_to = \"value\")`. #' See more details in `vignette(\"pivot\")`. gather <- function(data, key = \"key\", value = \"value\", ...) {   lifecycle::signal_stage(\"superseded\", \"gather()\") }"},{"path":"https://lifecycle.r-lib.org/dev/articles/communicate.html","id":"mark-function-as-experimental","dir":"Articles","previous_headings":"Functions","what":"Mark function as experimental","title":"Communicate lifecycle changes in your functions","text":"advertise function experimental interface might change future, first add experimental badge description: function experimental, might want add @keywords internal . ’re willing try experimental lifecycle feature, add call signal_stage() body: signal isn’t currently hooked behaviour, plan provide logging analysis tools future release.","code":"#' @description #' `r lifecycle::badge(\"experimental\")` cool_function <- function() {   lifecycle::signal_stage(\"experimental\", \"cool_function()\") }"},{"path":[]},{"path":"https://lifecycle.r-lib.org/dev/articles/communicate.html","id":"deprecate-an-argument-keeping-the-existing-default","dir":"Articles","previous_headings":"Arguments","what":"Deprecate an argument, keeping the existing default","title":"Communicate lifecycle changes in your functions","text":"Take example want deprecate na.rm favour always making TRUE. First, add badge argument description: add deprecation warning na.rm FALSE. case, ’s replacement behaviour, instead use details provide custom message:","code":"add_two <- function(x, y, na.rm = TRUE) {   sum(x, y, na.rm = na.rm) } #' @param na.rm `r lifecycle::badge(\"deprecated\")` `na.rm = FALSE` is no #'   longer supported; this function will always remove missing values add_two <- function(x, y, na.rm = TRUE) {   if (!isTRUE(na.rm)) {     lifecycle::deprecate_warn(       when = \"1.0.0\",        what = \"add_two(na.rm)\",       details = \"Ability to retain missing values will be dropped in next release.\"     )   }      sum(x, y, na.rm = na.rm) }  add_two(1, NA, na.rm = TRUE) #> [1] 1 add_two(1, NA, na.rm = FALSE) #> Warning: The `na.rm` argument of `add_two()` is deprecated as of lifecycle #> 1.0.0. #> ℹ Ability to retain missing values will be dropped in next release. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning #> was generated. #> [1] NA"},{"path":"https://lifecycle.r-lib.org/dev/articles/communicate.html","id":"deprecating-an-argument-providing-a-new-default","dir":"Articles","previous_headings":"Arguments","what":"Deprecating an argument, providing a new default","title":"Communicate lifecycle changes in your functions","text":"Alternatively, can change default value lifecycle::deprecated() make deprecation status obvious outside, use lifecycle::is_present() test whether argument provided. Unlike missing(), works direct indirect calls. chief advantage technique users get warning regardless value na.rm use:","code":"#' @importFrom lifecycle deprecated add_two <- function(x, y, na.rm = deprecated()) {   if (lifecycle::is_present(na.rm)) {     lifecycle::deprecate_warn(       when = \"1.0.0\",        what = \"add_two(na.rm)\",       details = \"Ability to retain missing values will be dropped in next release.\"     )   }      sum(x, y, na.rm = na.rm) } add_two(1, NA, na.rm = TRUE) #> Warning: The `na.rm` argument of `add_two()` is deprecated as of lifecycle #> 1.0.0. #> ℹ Ability to retain missing values will be dropped in next release. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning #> was generated. #> [1] 1 add_two(1, NA, na.rm = FALSE) #> Warning: The `na.rm` argument of `add_two()` is deprecated as of lifecycle #> 1.0.0. #> ℹ Ability to retain missing values will be dropped in next release. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning #> was generated. #> [1] NA"},{"path":"https://lifecycle.r-lib.org/dev/articles/communicate.html","id":"renaming-an-argument","dir":"Articles","previous_headings":"Arguments","what":"Renaming an argument","title":"Communicate lifecycle changes in your functions","text":"may want rename argument realise made mistake name argument. example, ’ve realised argument accidentally uses . separate compound name, instead _. ’ll need temporarily permit arguments, generating deprecation warning user supplies old argument:","code":"add_two <- function(x, y, na_rm = TRUE, na.rm = deprecated()) {   if (lifecycle::is_present(na.rm)) {     lifecycle::deprecate_warn(\"1.0.0\", \"add_two(na.rm)\", \"add_two(na_rm)\")     na_rm <- na.rm   }      sum(x, y, na.rm = na_rm) }  add_two(1, NA, na.rm = TRUE) #> Warning: The `na.rm` argument of `add_two()` is deprecated as of lifecycle #> 1.0.0. #> ℹ Please use the `na_rm` argument instead. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning #> was generated. #> [1] 1"},{"path":"https://lifecycle.r-lib.org/dev/articles/communicate.html","id":"reducing-allowed-inputs-to-an-argument","dir":"Articles","previous_headings":"Arguments","what":"Reducing allowed inputs to an argument","title":"Communicate lifecycle changes in your functions","text":"narrow set allowed inputs, call deprecate_warn() user supplies previously supported inputs. Make sure preserve previous behaviour:","code":"add_two <- function(x, y) {   if (length(y) != 1) {     lifecycle::deprecate_warn(\"1.0.0\", \"foo(y = 'must be a scalar')\")     y <- sum(y)   }   x + y }  add_two(1, 2) #> [1] 3 add_two(1, 1:5) #> Warning: The `y` argument of `foo()` must be a scalar as of lifecycle 1.0.0. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning #> was generated. #> [1] 16"},{"path":"https://lifecycle.r-lib.org/dev/articles/communicate.html","id":"anything-else","dir":"Articles","previous_headings":"","what":"Anything else","title":"Communicate lifecycle changes in your functions","text":"can wrap () deprecate behaviours otherwise described : Note fragment needs make sense “deprecated …” added end, fragment needs make sense sentence “Please use {} instead”.","code":"lifecycle::deprecate_warn(   when = \"1.0.0\",   what = I('Setting the global option \"pkg.opt\" to \"foo\"') ) #> Warning: Setting the global option \"pkg.opt\" to \"foo\" was deprecated in #> lifecycle 1.0.0. #> ℹ The deprecated feature was likely used in the base package. #>   Please report the issue to the authors. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning #> was generated.  lifecycle::deprecate_warn(   when = \"1.0.0\",   what = I('The global option \"pkg.another_opt\"'),   with = I('\"pkg.this_opt\"') ) #> Warning: The global option \"pkg.another_opt\" was deprecated in lifecycle 1.0.0. #> ℹ Please use \"pkg.this_opt\" instead. #> ℹ The deprecated feature was likely used in the base package. #>   Please report the issue to the authors. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning #> was generated."},{"path":"https://lifecycle.r-lib.org/dev/articles/stages.html","id":"stable","dir":"Articles","previous_headings":"","what":"Stable","title":"Lifecycle stages","text":"default development stage . function considered stable author happy interface, doesn’t see major issues, happy share world. stage default, functions given stable badge ’s specific need draw attention status. Stability defined terms breaking changes. breaking change change breaks code uses function expected. general, breaking changes reduce set code works without error, either removing function, removing function argument, decreasing set valid inputs. Breaking changes also include changes output type. imagine possible inputs function return result (error), breaking change makes set smaller. changes cause function stop working breaking changes. example, might accidentally relied bug. bug fixed, code breaks, breaking change. good way making code robust sort behaviour change use function explicitly intended effects. example, using c() concatenate two vectors put code risk clearly intended usage function. hand, using c() just side effect removing attributes probably good idea. example, used c(factor(\"foo\")) retrieve underlying integers factor, code broken R added support concatenating factors R 4.1.0. Stable functions come two promises related breaking changes: Breaking changes avoided possible. ’ll make breaking changes consider long term benefit change greater short term pain changing existing code. breaking change needed, occur gradually, deprecation process described next. gives plenty time adjust code starts generating errors.","code":""},{"path":"https://lifecycle.r-lib.org/dev/articles/stages.html","id":"deprecated","dir":"Articles","previous_headings":"","what":"Deprecated","title":"Lifecycle stages","text":" function better alternative available scheduled removal. call deprecated function, get warning telling use instead. example, take tibble::data_frame(): deprecation warning tells function deprecated (tibble 1.1.0, released 2016), use instead (tibble()). avoid annoying, deprecation messages appear per session, can find exactly come calling lifecycle::last_lifecycle_warnings(). vignette(\"manage\") provides advice handling deprecation warnings code. Particularly important functions may go two additional stages deprecation: Soft deprecated comes deprecated. ’s gentler form deprecation designed prevent new uses function encourage package developers move away . Soft deprecated allows package change interface encourage package developers update code users forced change. Defunct comes deprecated. cases, deprecated function eventually just deleted. important functions, ’ll instead make function defunct, means function continues exist deprecation warning turns error. user-friendly just removing function users get clear error message explaining code longer works can fix .","code":"df <- tibble::data_frame(x = 1) #> Warning message: #> `data_frame()` was deprecated in tibble 1.1.0. #> Please use `tibble()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated."},{"path":"https://lifecycle.r-lib.org/dev/articles/stages.html","id":"superseded","dir":"Articles","previous_headings":"","what":"Superseded","title":"Lifecycle stages","text":"softer alternative deprecation superseded. 1 function known better alternative, function going away . superseded function emit warning (since ’s risk keep using ), documentation tell recommend instead . Superseded functions receive new features, receive critical bug fixes needed keep working. ways superseded function actually safer stable function ’s guaranteed never change (better worse).","code":""},{"path":"https://lifecycle.r-lib.org/dev/articles/stages.html","id":"experimental","dir":"Articles","previous_headings":"","what":"Experimental","title":"Lifecycle stages","text":"functions released  stage. Experimental functions made available people can try provide feedback, come promises long term stability. particular, author reserves right make breaking changes without deprecation cycle. said, interaction popularity stability. Breaking popular function, even clearly labelled experimental, likely cause widespread pain ’ll generally try avoid . general, can assume package version number less 1.0.0 least somewhat experimental, may major changes future. experimental packages exist GitHub. ’re using non-CRAN package plan active relationship: package changes, need prepared update code.","code":""},{"path":"https://lifecycle.r-lib.org/dev/articles/stages.html","id":"superseded-stages","dir":"Articles","previous_headings":"","what":"Superseded stages","title":"Lifecycle stages","text":"longer use stages, document used past.","code":""},{"path":"https://lifecycle.r-lib.org/dev/articles/stages.html","id":"questioning","dir":"Articles","previous_headings":"Superseded stages","what":"Questioning","title":"Lifecycle stages","text":"Sometimes author function longer certain function optimal approach, doesn’t yet know better. functions can marked  give users heads author doubts function. knowing function questioning actionable, longer use recommend stage.","code":""},{"path":"https://lifecycle.r-lib.org/dev/articles/stages.html","id":"maturing","dir":"Articles","previous_headings":"Superseded stages","what":"Maturing","title":"Lifecycle stages","text":"Previously used  functions lay somewhere experimental stable. stopped using stage , like questioning, ’s clear actionable information stage delivers.","code":""},{"path":"https://lifecycle.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lionel Henry. Author, maintainer. Hadley Wickham. Author. . Copyright holder, funder.","code":""},{"path":"https://lifecycle.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Henry L, Wickham H (2025). lifecycle: Manage Life Cycle Package Functions. R package version 1.0.4.9000, https://lifecycle.r-lib.org/.","code":"@Manual{,   title = {lifecycle: Manage the Life Cycle of your Package Functions},   author = {Lionel Henry and Hadley Wickham},   year = {2025},   note = {R package version 1.0.4.9000},   url = {https://lifecycle.r-lib.org/}, }"},{"path":"https://lifecycle.r-lib.org/dev/index.html","id":"lifecycle","dir":"","previous_headings":"","what":"Manage the Life Cycle of your Package Functions","title":"Manage the Life Cycle of your Package Functions","text":"lifecycle provides set tools conventions manage life cycle exported functions. general motivation introduction key concepts, watch Hadley’s rstudio::global(2021) keynote “Maintaining house tidyverse built”. Read vignette(\"stages\") learn means function experimental, stable, deprecated, superseded. Read vignette(\"manage\") learn manage lifecycle changes functions use. Read vignette(\"communicate\") learn communicate lifecycle changes functions write.","code":""},{"path":"https://lifecycle.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Manage the Life Cycle of your Package Functions","text":"","code":"# Install release version from CRAN install.packages(\"lifecycle\")  # Install development version from GitHub pak::pak(\"r-lib/lifecycle\")"},{"path":"https://lifecycle.r-lib.org/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Manage the Life Cycle of your Package Functions","text":"Please note lifecycle project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/badge.html","id":null,"dir":"Reference","previous_headings":"","what":"Embed a lifecycle badge in documentation — badge","title":"Embed a lifecycle badge in documentation — badge","text":"include lifecycle badges documentation: Call usethis::use_lifecycle() copy badge images man/ folder package. Call lifecycle::badge() inside R backticks insert lifecycle badge:   deprecated feature function, good place badge top topic description. argument, can put badge argument description. badge displayed image HTML version documentation text otherwise. lifecycle::badge() run roxygen build time need add lifecycle Imports: just use badges. However, still good practice add Suggests: available package developers.","code":"#' `r lifecycle::badge(\"experimental\")` #' `r lifecycle::badge(\"deprecated\")` #' `r lifecycle::badge(\"superseded\")`"},{"path":"https://lifecycle.r-lib.org/dev/reference/badge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Embed a lifecycle badge in documentation — badge","text":"","code":"badge(stage)"},{"path":"https://lifecycle.r-lib.org/dev/reference/badge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Embed a lifecycle badge in documentation — badge","text":"stage lifecycle stage string. Must one \"experimental\", \"stable\", \"superseded\", \"deprecated\".","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/badge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Embed a lifecycle badge in documentation — badge","text":"Rd expression describing lifecycle stage.","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/badge.html","id":"badges","dir":"Reference","previous_headings":"","what":"Badges","title":"Embed a lifecycle badge in documentation — badge","text":"lifecycle::badge(\"experimental\") lifecycle::badge(\"stable\") lifecycle::badge(\"superseded\") lifecycle::badge(\"deprecated\") meaning stages described vignette(\"stages\").","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/deprecate_soft.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecate functions and arguments — deprecate_soft","title":"Deprecate functions and arguments — deprecate_soft","text":"functions provide three levels verbosity deprecated functions. Learn use vignette(\"communicate\"). deprecate_soft() warns deprecated function called directly, .e. user calling function wrote global environment developer calling package. warn called indirectly, .e. deprecation comes code control. deprecate_warn() warns unconditionally. deprecate_stop() fails unconditionally. Warnings issued every 8 hours avoid overwhelming user. Control options(lifecycle_verbosity).","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/deprecate_soft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecate functions and arguments — deprecate_soft","text":"","code":"deprecate_soft(   when,   what,   with = NULL,   details = NULL,   id = NULL,   env = caller_env(),   user_env = caller_env(2) )  deprecate_warn(   when,   what,   with = NULL,   details = NULL,   id = NULL,   always = FALSE,   env = caller_env(),   user_env = caller_env(2) )  deprecate_stop(when, what, with = NULL, details = NULL, env = caller_env())"},{"path":"https://lifecycle.r-lib.org/dev/reference/deprecate_soft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecate functions and arguments — deprecate_soft","text":"string giving version behaviour deprecated. string describing deprecated: Deprecate whole function \"foo()\". Deprecate argument \"foo(arg)\". Partially deprecate argument \"foo(arg = 'must scalar integer')\". Deprecate anything else custom message wrapping (). can optionally supply namespace: \"ns::foo()\", usually needed inferred caller environment. optional string giving recommended replacement deprecated behaviour. takes form . details cases deprecation message can automatically generated . , use details provide hand-written message. details can either single string character vector, converted bulleted list. default, info bullets used. Provide named vectors override. id id deprecation. warning issued id. Defaults generated message, give unique ID message details built programmatically depends inputs, like deprecate multiple functions warn . env, user_env Pair environments define deprecate_*() called (used determine package name) function called deprecating function called (used determine deprecate_soft() message). needed calling deprecate_*() internal helper, case forward env = caller_env() user_env = caller_env(2). always FALSE, default, warn every 8 hours.  TRUE, always warn direct usages. Indirect usages keep warning every 8 hours avoid disrupting users fix issue. use always = TRUE least one release default.","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/deprecate_soft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecate functions and arguments — deprecate_soft","text":"NULL, invisibly.","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/deprecate_soft.html","id":"conditions","dir":"Reference","previous_headings":"","what":"Conditions","title":"Deprecate functions and arguments — deprecate_soft","text":"Deprecation warnings class lifecycle_warning_deprecated. Deprecation errors class lifecycle_error_deprecated.","code":""},{"path":[]},{"path":"https://lifecycle.r-lib.org/dev/reference/deprecate_soft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecate functions and arguments — deprecate_soft","text":"","code":"# A deprecated function `foo`: deprecate_warn(\"1.0.0\", \"foo()\") #> Warning: `foo()` was deprecated in <NA> 1.0.0. #> ℹ The deprecated feature was likely used in the base package. #>   Please report the issue to the authors.  # A deprecated argument `arg`: deprecate_warn(\"1.0.0\", \"foo(arg)\") #> Warning: The `arg` argument of `foo()` is deprecated as of <NA> 1.0.0. #> ℹ The deprecated feature was likely used in the base package. #>   Please report the issue to the authors.  # A partially deprecated argument `arg`: deprecate_warn(\"1.0.0\", \"foo(arg = 'must be a scalar integer')\") #> Warning: The `arg` argument of `foo()` must be a scalar integer as of <NA> #> 1.0.0. #> ℹ The deprecated feature was likely used in the base package. #>   Please report the issue to the authors.  # A deprecated function with a function replacement: deprecate_warn(\"1.0.0\", \"foo()\", \"bar()\") #> Warning: `foo()` was deprecated in <NA> 1.0.0. #> ℹ Please use `bar()` instead. #> ℹ The deprecated feature was likely used in the base package. #>   Please report the issue to the authors.  # A deprecated function with a function replacement from a # different package: deprecate_warn(\"1.0.0\", \"foo()\", \"otherpackage::bar()\") #> Warning: `foo()` was deprecated in <NA> 1.0.0. #> ℹ Please use `otherpackage::bar()` instead. #> ℹ The deprecated feature was likely used in the base package. #>   Please report the issue to the authors.  # A deprecated function with custom message: deprecate_warn(   when = \"1.0.0\",   what = \"foo()\",   details = \"Please use `otherpackage::bar(foo = TRUE)` instead\" ) #> Warning: `foo()` was deprecated in <NA> 1.0.0. #> ℹ Please use `otherpackage::bar(foo = TRUE)` instead #> ℹ The deprecated feature was likely used in the base package. #>   Please report the issue to the authors.  # A deprecated function with custom bulleted list: deprecate_warn(   when = \"1.0.0\",   what = \"foo()\",   details = c(     x = \"This is dangerous\",     i = \"Did you mean `safe_foo()` instead?\"   ) ) #> Warning: `foo()` was deprecated in <NA> 1.0.0. #> ✖ This is dangerous #> ℹ Did you mean `safe_foo()` instead? #> ℹ The deprecated feature was likely used in the base package. #>   Please report the issue to the authors."},{"path":"https://lifecycle.r-lib.org/dev/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark an argument as deprecated — deprecated","title":"Mark an argument as deprecated — deprecated","text":"Signal deprecated argument using self-documenting sentinel deprecated() default argument. Test whether caller supplied argument is_present().","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark an argument as deprecated — deprecated","text":"","code":"deprecated()  is_present(arg)"},{"path":"https://lifecycle.r-lib.org/dev/reference/deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark an argument as deprecated — deprecated","text":"arg deprecated() function argument.","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/deprecated.html","id":"magical-defaults","dir":"Reference","previous_headings":"","what":"Magical defaults","title":"Mark an argument as deprecated — deprecated","text":"recommend importing lifecycle::deprecated() namespace use without namespace qualifier. general, advise magical defaults, .e. defaults evaluated user. case deprecated(), trade-worth meaning default obvious reason user call deprecated() .","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/deprecated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mark an argument as deprecated — deprecated","text":"","code":"foobar_adder <- function(foo, bar, baz = deprecated()) {   # Check if user has supplied `baz` instead of `bar`   if (lifecycle::is_present(baz)) {      # Signal the deprecation to the user     deprecate_warn(\"1.0.0\", \"foo::bar_adder(baz = )\", \"foo::bar_adder(bar = )\")      # Deal with the deprecated argument for compatibility     bar <- baz   }    foo + bar }  foobar_adder(1, 2) #> [1] 3 foobar_adder(1, baz = 2) #> Warning: The `baz` argument of `bar_adder()` is deprecated as of foo 1.0.0. #> ℹ Please use the `bar` argument instead. #> [1] 3"},{"path":"https://lifecycle.r-lib.org/dev/reference/expect_deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Does expression produce lifecycle warnings or errors? — expect_deprecated","title":"Does expression produce lifecycle warnings or errors? — expect_deprecated","text":"functions equivalent testthat::expect_warning() testthat::expect_error() check specifically lifecycle warnings errors. test whether deprecated feature still works without causing deprecation warning, set lifecycle_verbosity option \"quiet\".","code":"test_that(\"feature still works\", {   withr::local_options(lifecycle_verbosity = \"quiet\")   expect_true(my_deprecated_function()) })"},{"path":"https://lifecycle.r-lib.org/dev/reference/expect_deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does expression produce lifecycle warnings or errors? — expect_deprecated","text":"","code":"expect_deprecated(expr, regexp = NULL, ...)  expect_defunct(expr)"},{"path":"https://lifecycle.r-lib.org/dev/reference/expect_deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does expression produce lifecycle warnings or errors? — expect_deprecated","text":"expr Expression produce lifecycle warning error. regexp Optional regular expression matched expected warning message. ... Arguments passed expect_match fixed TRUE, treats regexp string matched exactly (regular expressions). Overrides perl. perl logical.  Perl-compatible regexps used?","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/expect_deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Does expression produce lifecycle warnings or errors? — expect_deprecated","text":"expect_deprecated() sets lifecycle_verbosity option \"warning\" enforce deprecation warnings otherwise shown every 8 hours.","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/last_lifecycle_warnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Display last deprecation warnings — last_lifecycle_warnings","title":"Display last deprecation warnings — last_lifecycle_warnings","text":"last_lifecycle_warnings() returns list warnings occurred last top-level R command, along backtrace. Use print(last_lifecycle_warnings(), simplify = level) control verbosity backtrace. simplify argument supports one \"branch\" (default), \"collapse\", \"none\" (increasing order verbosity).","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/last_lifecycle_warnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display last deprecation warnings — last_lifecycle_warnings","text":"","code":"last_lifecycle_warnings()"},{"path":"https://lifecycle.r-lib.org/dev/reference/last_lifecycle_warnings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display last deprecation warnings — last_lifecycle_warnings","text":"","code":"# These examples are not run because `last_lifecycle_warnings()` does not # work well within knitr and pkgdown if (FALSE) { # \\dontrun{  f <- function() invisible(g()) g <- function() list(h(), i()) h <- function() deprecate_warn(\"1.0.0\", \"this()\") i <- function() deprecate_warn(\"1.0.0\", \"that()\") f()  # Print all the warnings that occurred during the last command: last_lifecycle_warnings()   # By default, the backtraces are printed in their simplified form. # Use `simplify` to control the verbosity: print(last_lifecycle_warnings(), simplify = \"none\") } # }"},{"path":"https://lifecycle.r-lib.org/dev/reference/lifecycle-package.html","id":null,"dir":"Reference","previous_headings":"","what":"lifecycle: Manage the Life Cycle of your Package Functions — lifecycle-package","title":"lifecycle: Manage the Life Cycle of your Package Functions — lifecycle-package","text":"Manage life cycle exported functions shared conventions, documentation badges, user-friendly deprecation warnings.","code":""},{"path":[]},{"path":"https://lifecycle.r-lib.org/dev/reference/lifecycle-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"lifecycle: Manage the Life Cycle of your Package Functions — lifecycle-package","text":"Maintainer: Lionel Henry lionel@posit.co Authors: Hadley Wickham hadley@posit.co (ORCID) contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/lifecycle_linter.html","id":null,"dir":"Reference","previous_headings":"","what":"Lint usages of functions that have a non-stable life cycle. — pkg_lifecycle_statuses","title":"Lint usages of functions that have a non-stable life cycle. — pkg_lifecycle_statuses","text":"lifecycle_linter() creates linter lifecycle annotations can included .lintr configuration lintr used directly. lint_lifecycle() dynamically queries package documentation packages packages lifecycle annotations searches directory path usages functions. lint_tidyverse_lifecycle() convenience function call lint_lifecycle() packages tidyverse. pkg_lifecycle_statuses() returns data frame functions lifecycle annotations installed package.","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/lifecycle_linter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lint usages of functions that have a non-stable life cycle. — pkg_lifecycle_statuses","text":"","code":"pkg_lifecycle_statuses(   package,   which = c(\"superseded\", \"deprecated\", \"questioning\", \"defunct\", \"experimental\",     \"soft-deprecated\", \"retired\") )  lint_lifecycle(   packages,   path = \".\",   pattern = \"(?i)[.](r|rmd|qmd|rnw|rhtml|rrst|rtex|rtxt)$\",   which = c(\"superseded\", \"deprecated\", \"questioning\", \"defunct\", \"experimental\",     \"soft-deprecated\", \"retired\"),   symbol_is_undesirable = FALSE )  lint_tidyverse_lifecycle(   path = \".\",   pattern = \"(?i)[.](r|rmd|qmd|rnw|rhtml|rrst|rtex|rtxt)$\",   which = c(\"superseded\", \"deprecated\", \"questioning\", \"defunct\", \"experimental\",     \"soft-deprecated\", \"retired\"),   symbol_is_undesirable = FALSE )  lifecycle_linter(   packages = tidyverse::tidyverse_packages(),   which = c(\"superseded\", \"deprecated\", \"questioning\", \"defunct\", \"experimental\",     \"soft-deprecated\", \"retired\"),   symbol_is_undesirable = FALSE )"},{"path":"https://lifecycle.r-lib.org/dev/reference/lifecycle_linter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lint usages of functions that have a non-stable life cycle. — pkg_lifecycle_statuses","text":"package name installed package. Vector lifecycle statuses lint. packages One installed packages query lifecycle statuses. path directory path files want search. pattern files matching pattern searched. default searches files ending .R .Rmd. symbol_is_undesirable Also lint symbol usages, e.g. lapply(x, is_na)?","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/lifecycle_linter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lint usages of functions that have a non-stable life cycle. — pkg_lifecycle_statuses","text":"","code":"lintr::lint(   text = \"is_na(x)\",   linters = lifecycle_linter(packages = \"rlang\") ) #> <text>:1:1: style: [lifecycle_linter] `rlang::is_na` is questioning #> is_na(x) #> ^~~~~ lintr::lint(   text = \"lapply(x, is_na)\",   linters = lifecycle_linter(packages = \"rlang\",   symbol_is_undesirable = TRUE) ) #> <text>:1:11: style: [lifecycle_linter] `rlang::is_na` is questioning #> lapply(x, is_na) #>           ^~~~~"},{"path":"https://lifecycle.r-lib.org/dev/reference/signal_experimental.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions for signalling experimental and lifecycle stages — signal_experimental","title":"Deprecated functions for signalling experimental and lifecycle stages — signal_experimental","text":"Please use signal_stage() instead","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/signal_experimental.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions for signalling experimental and lifecycle stages — signal_experimental","text":"","code":"signal_experimental(when, what, env = caller_env())  signal_superseded(when, what, env = caller_env())"},{"path":"https://lifecycle.r-lib.org/dev/reference/signal_stage.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal other experimental or superseded features — signal_stage","title":"Signal other experimental or superseded features — signal_stage","text":"signal_stage() allows signal life cycle stages deprecation (use deprecate_warn() friends). behaviour associated signal, future provide tools log report usage experimental superseded functions.","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/signal_stage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal other experimental or superseded features — signal_stage","text":"","code":"signal_stage(stage, what, with = NULL, env = caller_env())"},{"path":"https://lifecycle.r-lib.org/dev/reference/signal_stage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal other experimental or superseded features — signal_stage","text":"stage Life cycle stage, either \"experimental\" \"superseded\". String describing feature stage applies , using syntax deprecate_warn(). optional string giving recommended replacement superseded function. env Environment used determine signal_stage() called, used determine package name).","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/signal_stage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signal other experimental or superseded features — signal_stage","text":"","code":"foofy <- function(x, y, z) {   signal_stage(\"experimental\", \"foofy()\")   x + y / z } foofy(1, 2, 3) #> [1] 1.666667"},{"path":"https://lifecycle.r-lib.org/dev/reference/verbosity.html","id":null,"dir":"Reference","previous_headings":"","what":"Control the verbosity of deprecation signals — verbosity","title":"Control the verbosity of deprecation signals — verbosity","text":"3 levels verbosity deprecated functions: silence, warning, error. Since lifecycle package avoids disruptive warnings, default level verbosity depends lifecycle stage deprecated function, context caller (global environment testthat unit tests cause warnings), whether warning already issued (see help deprecation functions). can control level verbosity global option lifecycle_verbosity. can set : \"quiet\" suppress deprecation messages. \"default\" NULL warn every 8 hours. \"warning\" warn every time. \"error\" error instead warning. Note functions calling deprecate_stop() invariably throw errors.","code":""},{"path":"https://lifecycle.r-lib.org/dev/reference/verbosity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control the verbosity of deprecation signals — verbosity","text":"","code":"if (rlang::is_installed(\"testthat\")) {   library(testthat)    mytool <- function() {     deprecate_soft(\"1.0.0\", \"mytool()\")     10 * 10   }    # Forcing the verbosity level is useful for unit testing. You can   # force errors to test that the function is indeed deprecated:   test_that(\"mytool is deprecated\", {     rlang::local_options(lifecycle_verbosity = \"error\")     expect_error(mytool(), class = \"defunctError\")   })    # Or you can enforce silence to safely test that the function   # still works:   test_that(\"mytool still works\", {     rlang::local_options(lifecycle_verbosity = \"quiet\")     expect_equal(mytool(), 100)   }) } #> Test passed 🥇 #> Test passed 🥇"},{"path":"https://lifecycle.r-lib.org/dev/news/index.html","id":"lifecycle-development-version","dir":"Changelog","previous_headings":"","what":"lifecycle (development version)","title":"lifecycle (development version)","text":"deprecate_soft() deprecate_warn() faster thanks internal refactoring. deprecate_soft() now actually warns every 8 hours. Improvements lint_lifecycle() lint_tidyverse_lifecycle() (@AshesITR): Updated support lintr >= 3.0.0 (#178). Fixed default pattern= argument find R files (#165). Fixed lint_tidyverse_lifecycle() ignoring pattern= argument (#179). Added support Quarto qmd files default pattern= argument (#155). Added support Rnw, Rhtml, Rrst, Rtex Rtxt files default pattern= argument. Exported lifecycle_linter() allow including linter .lintr configurations using lintr (#122).","code":""},{"path":"https://lifecycle.r-lib.org/dev/news/index.html","id":"lifecycle-104","dir":"Changelog","previous_headings":"","what":"lifecycle 1.0.4","title":"lifecycle 1.0.4","text":"CRAN release: 2023-11-07 Repeated calls deprecate_soft() deprecate_warn() faster thanks internal refactoring (#177). Switch expr_deparse() deparse(). improves performance considerably cost making unusual function calls mildly less appealing (#167).","code":""},{"path":"https://lifecycle.r-lib.org/dev/news/index.html","id":"lifecycle-103","dir":"Changelog","previous_headings":"","what":"lifecycle 1.0.3","title":"lifecycle 1.0.3","text":"CRAN release: 2022-10-07 line now info bullet. details lines info bullets default, unless argument named. Indirect usages deprecated features now mention package likely used deprecated feature recommends contacting authors (#135). Indirect usages deprecate_warn() longer warn repeatedly, even always = TRUE (#135). tests, deprecate_soft() warn deprecated function called directly package tested, one dependencies. ensures see warning ’s responsibility something (#134). Soft deprecations now warn every 8 hours non-package code (#134).","code":""},{"path":"https://lifecycle.r-lib.org/dev/news/index.html","id":"lifecycle-102","dir":"Changelog","previous_headings":"","what":"lifecycle 1.0.2","title":"lifecycle 1.0.2","text":"CRAN release: 2022-09-09 can now generate arbitrary text deprecation message wrapping () (#120). deprecate_warn() gains always = TRUE argument force warnings occur every time, every 8 hours. adds extra step deprecate_warn() deprecate_stop() (#124). signal_stage() now supports (#116).","code":""},{"path":"https://lifecycle.r-lib.org/dev/news/index.html","id":"lifecycle-101","dir":"Changelog","previous_headings":"","what":"lifecycle 1.0.1","title":"lifecycle 1.0.1","text":"CRAN release: 2021-09-24 deprecate_soft() now follows verbosity option called global environment (#113). last_warnings() renamed last_lifecycle_warnings() last_warning() removed. compatibility future rlang::last_warnings() function released next rlang version.","code":""},{"path":"https://lifecycle.r-lib.org/dev/news/index.html","id":"lifecycle-100","dir":"Changelog","previous_headings":"","what":"lifecycle 1.0.0","title":"lifecycle 1.0.0","text":"CRAN release: 2021-02-15 New vignettes: vignette(\"stages\") describes lifecycle stages vignette(\"manage\") teaches manage lifecycle changes functions use. vignette(\"communicate\") shows use lifecycle functions write. deprecate_soft(), deprecate_warn(), deprecate_stop(): can deprecate argument foo(arg) instead foo(arg =) (#78). syntax similar spirit formal arguments function definitions. can deprecate R6 methods using class$method() (#54). character vector details now converted bulleted list (#55). Messages non-prefix functions (like “x<-()” “%>%()”) look little nicer (#95). Manually printed warnings now omit advice footer (#68). Experimental signal_stage() can used signal function experimental superseded. signals currently hooked behaviour, ’ll add tools future release (#44). lifecycle_cnd_data() removed; far can tell wasn’t used anyone.","code":""},{"path":"https://lifecycle.r-lib.org/dev/news/index.html","id":"lifecycle-020","dir":"Changelog","previous_headings":"","what":"lifecycle 0.2.0","title":"lifecycle 0.2.0","text":"CRAN release: 2020-03-06 Lifecycle warnings now displayed every 8 hours. Added experimental signal_experimental() signal_superseded() functions. Added “superseded” lifecycle stage documentation. deprecate_stop() now mentions function defunct (#28). New expect_deprecated() expect_defunct() functions testting lifecycle warnings errors. expect_deprecated() automatically sets lifecycle_verbosity option \"warning\" enforce warnings invocation rather per session. New syntax \"foo(arg = 'can\\\\'t baz')\" describe specific inputs argument deprecated (#30, @krlmlr). New is_present() function test whether caller supplied deprecated() function.","code":""},{"path":"https://lifecycle.r-lib.org/dev/news/index.html","id":"lifecycle-010","dir":"Changelog","previous_headings":"","what":"lifecycle 0.1.0","title":"lifecycle 0.1.0","text":"CRAN release: 2019-08-01 Deprecated functions control developer now warn repeatedly unit tests. Deprecation warnings now record backtrace. Call lifecycle::last_lifecycle_warnings() lifecycle::last_warning() print warnings occurred last command, along backtraces. naming scheme signaller functions simplified: signal_soft_deprecated() now deprecate_soft(). warn_deprecated() now deprecate_warn(). stop_defunct() now deprecate_stop(). signaller functions now take version two descriptors deprecated feature replacement (latter optional). deprecation message built components. can pass details argument append additional information generated deprecation message. Helpers rlang’s compat-lifecycle.R drop-file now exported package.","code":""}]

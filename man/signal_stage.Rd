% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/signal.R
\name{signal_stage}
\alias{signal_stage}
\title{Signal other experimental or superseded features}
\usage{
signal_stage(stage, what, env = caller_env())
}
\arguments{
\item{stage}{Life cycle stage, either "experimental" or "superseded".}

\item{what}{String describing what feature the stage applies too, using
the same syntax as \code{\link[=deprecate_warn]{deprecate_warn()}}.}

\item{env}{Pair of environments that define where \verb{deprecate_*()}
was called (used to determine the package name) and where the function
called the deprecating function was called (used to determine if
\code{deprecate_soft()} should message).

These are only needed if you're calling \verb{deprecate_*()} from an internal
helper, in which case you should forward \code{env = caller_env()} and
\code{user_env = caller_env(2)}.}
}
\description{
\ifelse{html}{\out{<a href='https://www.tidyverse.org/lifecycle/#experimental'><img src='figures/lifecycle-experimental.svg' alt='Experimental lifecycle'></a>}}{\strong{Experimental}}

\code{signal_stage()} allows you to signal life cycle stages other than
deprecation (for which you should use \code{\link[=deprecate_warn]{deprecate_warn()}} and friends).
There is no behaviour associated with this signal, but in the future
we will provide tools to log and report on usage of experimental and
superseded functions.
}
\examples{
foofy <- function(x, y, z) {
  signal_stage("experimental", "foofy()")
  x + y / z
}
foofy(1, 2, 3)
}
